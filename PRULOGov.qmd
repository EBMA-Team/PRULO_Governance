---
title: "PRULO_Governance"
author: "Corey Scholes"
affiliation: "EBM Analytics"
version: 3.0
type: "website"
number-sections: true
number-depth: 3
date: "2025-Jun-03"
date-modified: "2025-Jun-03"

bibliography: PRULOGov references.bib

editor:
  visual
format:
  html:
    toc: true
    number-sections: true
    code-fold: true
    
execute: 
  echo: false
  warning: false
  message: false
---

# Preamble

The following analysis is a report on the activity, quality and data contained in the PRULO registry.

Analysis packages were loaded initially into the *R* environment.

```{r, load-pkgs}

if (!require("pacman")) install.packages("pacman")
pacman::p_load(# Load required packages
  "ggforce",
  "ggdag",
  "ggmap",
  "geosphere",
  "dplyr",
  "flextable",
  "litedown",
  "grateful",
  "modelsummary",
  "quantreg",
  "readr",
  "knitr",
  "cardx",
  "forcats",
  "gargle",
  "googledrive",
  "googlesheets4",
  "openxlsx2",
  "tidyverse",
  "tidymodels",
  "lubridate",
  "consort",
  "gtsummary",
  "survival",
  "ggplot2",
  "ggdist",
  "ggfortify",
  "mice",
  "marginaleffects",
  "naniar",
  "quantreg",
  "broom",
  "epoxy",
  "broom.helpers",
  "stringr"
  )
  
  
```

Access to the PRULO datasets was pre-authorised.

```{r}
#| label: auth2
#| echo: false

options(
  gargle_oauth_cache = ".secrets",
  gargle_oauth_email = TRUE
)

googledrive::drive_auth(
  cache = ".secrets", 
  email = TRUE
  )
```

A function was generated to retrieve files using the *googledrive* package, to call on later in the analysis for processing data imports.

```{r}

#| label: folder
#| echo: false

base_folder_id1 <- "1og1hWKEXFcy8v8pLSzA_Ii767bbCe_EK"




```

```{r}
get_specific_snapshot <- function(folder_name, base_folder_id = base_folder_id1) {
  tryCatch({
    # Check if the folder exists in the base directory
    folder <- googledrive::drive_ls(as_id(base_folder_id), pattern = paste0("^", folder_name, "$"))
    
    if(nrow(folder) == 0) {
      stop(paste("Folder", folder_name, "not found"))
    }
    
    # Find the snapshot file in the specified folder
    snapshot_file <- googledrive::drive_ls(
      folder$id, 
      pattern = "Registry data snapshot\\.xlsx$"
    )
    
    if(nrow(snapshot_file) == 0) {
      stop("No snapshot file found in specified folder")
    }
    
    # Return both pieces of information as a list
    return(list(
      snapshot = snapshot_file,
      folder_name = folder$name
    ))
    
  }, error = function(e) {
    stop(paste("Error finding specified snapshot:", e$message))
  })
}
```

Data was retrieved from live database tables. Source files were specified and stored as global variables to call on in further functions.

```{r}
#| label: live-table
#| echo: false

SheetIDs <- list(
DbSS = "https://docs.google.com/spreadsheets/d/1zyFuf0Wmij13ELTYNmdi_BprF8hU4QSCPsNZ0EYRXzo/edit"
)

# Treatments Masterlist - Timestamp is > Registry Start date (gsuite)

```

```{r}
#| label: read-tables

# Authenticate for sheets using the same token
gs4_auth(token = drive_token())



ComplicTable <- googlesheets4::read_sheet(
  ss = SheetIDs$DbSS,
  sheet = "Complications", 
  col_names = TRUE, 
  col_types = "TccDccDc"
  )


#To match to acctData
PatientTable <- googlesheets4::range_read(
  ss = SheetIDs$DbSS,
  sheet = "Patient", 
  range = "A10:R",
  col_names = FALSE, 
  col_types = "DccccDcccDcicccDci"
  )


Patient_Col <- c(
  "PatientCreationDate",
  "PatientID",
  "LastName",	
  "FirstName",	
  "AlternateID",	
  "DateOfBirth",	
  "Sex",	
  "RegistryStatus",	
  "RegistryStatusNotes",	
  "DateRegistryStatus",	
  "NotificationMethod",	
  "NoTreatmentRECORDs",	
  "Email",	
  "Phone",
  "PatientRegistrationStatus",
  "DatePatientRegistration",
  "DominantSide",
  "TrueNoTreatments"
)

colnames(PatientTable) <- Patient_Col


```

A static registry snapshot was retrieved and formatted based on the fixed date of preparation of the snapshot (31-Mar-2025).

```{r}

# Authenticate for sheets using the same token
gs4_auth(token = drive_token())

# To get a snapshot from a specific folder (e.g., "20230415")
specific_snapshot <- get_specific_snapshot("20250410")


```

```{r}

temp_file1 <- tempfile(fileext = ".xlsx")
drive_download(
  file = specific_snapshot$snapshot$id,
  path = temp_file1,
  overwrite = TRUE
)

# Correction to reset back to excel origin
DaysDiff <- as.numeric(as.duration(interval(ymd("1899-12-30"), ymd("1970-01-01"))),"days")


Snapshot <- openxlsx2::wb_to_df(
  temp_file1,
  sheet = "Combined",
  colNames = TRUE,
  detectDates = TRUE
  ) |> mutate(
    PatientID = stringr::str_split_i(TreatmentID,"\\.",1),
    SurgicalTreatment2 = case_when(
      stringr::str_detect(str_to_lower(EBMAComment),"surgery recommended") & SurgicalTreatment == "Non-Surgical" ~ "Surgery recommended",
      .default = SurgicalTreatment
    )
  ) |> unite(
  col = "CombID",
  sep = ".",
  c("PatientID","AffectedSide"),
  remove = FALSE
)



STROBEInput <- openxlsx2::wb_to_df(
  temp_file1,
  sheet = "Strobe_Input",
  colNames = TRUE,
  detectDates = TRUE
  )

```

# Context

# Recruitment Flow by Region

Flowcharts as per STROBE [@Vandenbroucke2007] and RECORD [@Benchimol2015] guidelines were generated for each region (shoulder, hip, knee) enrolled into the Registry. Followup was set to eligibility at 12months.

```{r}


STROBEFlow2 <- STROBEInput |> 
  # Filter out rows with missing TreatmentID
  dplyr::filter(!is.na(TreatmentID)) |> 
  # Join with relevant columns from Snapshot
  dplyr::left_join(
    Snapshot |> 
      dplyr::select(
        TreatmentID,
        CombID,
        DateInitialExamination,
        EligibleAtPreop,
        EligibleAtx12months,
        SurgicalTreatment2
      ) |> 
      # Convert all date columns to date format
      dplyr::mutate(
        across(contains("Date"), lubridate::ymd)
      ),
    # Explicitly specify join column
    by = "TreatmentID"
  ) |> dplyr::mutate(
    TreatmentStatus2 = if_else(
          TreatmentStatus == "No further followup" & is.na(DateTreatment),
          "Archived",
          TreatmentStatus
  )
  )

```

```{r}

CurrentDate <- as.character("20250430")

STROBEFlow3 <- STROBEFlow2 |> dplyr::mutate(
    exclusion1 = case_when(
    is.na(SurgicalTreatment2) ~ "Not a surgical treatment",
    SurgicalTreatment2 == "Surgical" & stringr::str_detect(RegistryStatus,"Opt-out") ~ "Patient Opt-Out",
    SurgicalTreatment2 == "Surgical" & is.na(RegistryCohortName) ~ "No cohort",
    SurgicalTreatment2 == "Surgical" ~ NA_character_,
    .default = "Not a surgical treatment"
  ),
  followup = if_else(
    is.na(exclusion1),
    TreatmentID,
    NA_character_
  ),
  lost_followup = case_when(
    is.na(exclusion1) & TreatmentStatus2 == "Failed" & (ymd(DateStatusChange) < ymd(CurrentDate)) ~ "Procedure failure",
    is.na(exclusion1) & TreatmentStatus2 == "No further followup" & (ymd(DateStatusChange) < ymd(CurrentDate)) ~ "Patient Opt-out",
    is.na(exclusion1) & is.na(EligibleAtx12months) ~ "Not eligible for followup"
  ),
  mitt = if_else(
    !is.na(followup) & is.na(lost_followup),
    TreatmentID,
    NA_character_
)
) |> dplyr::rename(
  trialno = "TreatmentID",
  arm3 = "RegistryCohortName"
)

```

```{r}
#| label: fig-strobe-cohort1
#| fig-cap: "Flowchart of extraction and followup of surgical sample from the Registry - 1"


STROBEPlot1 <- consort_plot(
  data = STROBEFlow3 |> dplyr::filter(
    arm3 == "KneeArthritis" | arm3 == "ReinterventionArthroplasty" | arm3 == "KneeGeneral"
  ),
 orders = c(
   trialno = "Population",
   exclusion1 = "Ineligible",
   trialno = "Baseline Analysis",
   arm3 = "Cohort",
   lost_followup = "Excluded",
   mitt = "Followup Analysis"
   ),
 side_box = c(
   "exclusion1",
   "lost_followup"
   ),
 allocation = "arm3",
 cex = 0.6
)

knitr::knit_print(STROBEPlot1)

```

```{r}
#| label: fig-strobe-cohort2
#| fig-cap: "Flowchart of extraction and followup of surgical sample from the Registry - 2"


STROBEPlot2 <- consort_plot(
  data = STROBEFlow3 |> dplyr::filter(
    arm3 == "TFInstability" | arm3 == "KneeDeformity"
  ),
 orders = c(
   trialno = "Population",
   exclusion1 = "Ineligible",
   trialno = "Baseline Analysis",
   arm3 = "Cohort",
   lost_followup = "Excluded",
   mitt = "Followup Analysis"
   ),
 side_box = c(
   "exclusion1",
   "lost_followup"
   ),
 allocation = "arm3",
 cex = 0.6
)

knitr::knit_print(STROBEPlot2)

```

Cumulative recruitment over time was plotted from Registry inception to the present.

```{r}
#| label: fig-progress
#| fig-cap: "Cumulative record creation within SHARKS from inception to present"


RecordCount <- dplyr::summarise(
  STROBEFlow3,
  Count = n(),
  .by = PatientCreationDate
) |> arrange(
  PatientCreationDate
) |> dplyr::mutate(
  CumulativeCount = cumsum(Count),
  PatientCreationNum = as.numeric(PatientCreationDate)
  ) |> filter(
    !(PatientCreationDate < ymd("20160701"))
  )

cumulative_plot <- ggplot(RecordCount, aes(x = PatientCreationDate, y = CumulativeCount)) +
  geom_line(color = "#2c3e50", size = 1) +
  # Add the spline fit with confidence interval
  geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), 
              color = "#e74c3c", size = 1.2, se = TRUE, fill = "#e74c3c", alpha = 0.2) +
  geom_point(color = "#3498db", size = 1) +
  # Add labels and title
  labs(
    title = "Cumulative Patient Count Over Time",
    x = "Date",
    y = "Cumulative Number of Patients",
    #caption = "Data source: STROBEFlow3"
  ) +
  # Improve the theme and formatting
  theme_minimal() +
  theme(
    plot.title = element_text(face = "bold", size = 14),
    axis.title = element_text(face = "bold"),
    panel.grid.minor = element_blank()
  )

# Print the plot
knitr::knit_print(cumulative_plot)


```

# Missingness and Compliance

## Baseline and Intraoperative

```{r}
#| label: fig-baseline-miss
#| fig-cap: "Missingness of baseline PROMs and intraoperative date by registry cohort"

gg_miss_fct(Snapshot |> dplyr::filter(
      EligibleAtPreop == "Yes" | EligibleAtIntraop == "Yes"
      ) |> dplyr::select(
        VR12_Physical_TotalScore_Preop,
        Procedure,
        #TreatmentProvider, 
        RegistryCohortName
        ), 
      RegistryCohortName
      )


```

Missingness for baseline PROMs (represented by VR12) and intraoperative data is captured in @fig-baseline-miss. Intraoperative data was captured slightly differently between cohorts in the previous system, so multiple fields have been utilised to illustrate intraoperative capture across cohorts.

Overall, there are variable response rates for baseline scores across cohorts. This may reflect variable engagement during consultant clinics. We have also identified a system issue that is impeding scores from being sent to patients that are being re-categorised from one cohort to another. This is predominantly affecting cases that have limited information on their referral and are subsequently moved from the *General* cohort.

## Patient-reported Outcomes by TimePoint

```{r}
min_percent <- 10
max_percent <- 100  # Or another value that encompasses all your data
```

```{r}
#| label: fig-sane-miss
#| fig-cap: "Missingness of SANE by Timepoint across all cohorts"

PROMSANE <- Snapshot |> dplyr::select(
  TreatmentID,
  starts_with("SANE"),
  starts_with("EligibleAt"),
  -EligibleAtIntraop
) |> rename_with(
  ~gsub("Atx","At_",.x, fixed = TRUE)
) |> dplyr::rename(
  EligibleAt_Preop = "EligibleAtPreop"
  ) |> pivot_longer(
  cols = !TreatmentID,
  names_to = c(".value","TimePoint"),
  names_sep = "_",
  values_drop_na = TRUE
) |> mutate(
  TimePoint = factor(TimePoint, levels = c("Preop","6months","12months","24months"), ordered = TRUE, exclude = NA),
) |> dplyr::filter(
  EligibleAt == "Yes",
  !is.na(TimePoint)
) |> left_join(
  Snapshot |> dplyr::select(
    TreatmentID,
    SurgicalTreatment2,
    RegistryCohortName
  ),
  by = "TreatmentID"
)

gg_miss_fct(PROMSANE |> dplyr::filter(
      !is.na(EligibleAt),
      SurgicalTreatment2 == "Surgical"
      ) |> dplyr::select(
        SANE,
        TimePoint
        ), 
      TimePoint
      ) +
  scale_fill_gradient(
    low = "steelblue",     # Color for low missingness values
    high = "darkred",      # Color for high missingness values
    limits = c(min_percent, max_percent),    # Consistent scale limits
    name = "% Missing"     # Legend title
  )


```

```{r}
#| label: fig-sane2-miss
#| fig-cap: "Missingness of SANE for surgical cases by Timepoint across all cohorts"

gg_miss_fct(PROMSANE |> dplyr::filter(SurgicalTreatment2 == "Surgical") |> dplyr::select(contains("SANE"), TimePoint), TimePoint) +
  scale_fill_gradient(
    low = "steelblue",     # Color for low missingness values
    high = "darkred",      # Color for high missingness values
    limits = c(min_percent, max_percent),    # Consistent scale limits
    name = "% Missing"     # Legend title
  ) 


```

```{r}
#| label: fig-kneearthritis-miss
#| fig-cap: "Missingness of KOOS JR by Timepoint in the Knee Arthritis cohort"

SnapshotKA <- Snapshot |> dplyr::filter(
  RegistryCohortName == "KneeArthritis"
  ) |> rename_with(
  ~gsub("Atx","At_",.x, fixed = TRUE)
) |> rename_with(
  ~gsub("KOOSJR_TotalScore","KOOSJRTotalScore",.x, fixed = TRUE)
) |> rename(
  EligibleAt_Preop = "EligibleAtPreop"
)

PROMKA <- SnapshotKA |> dplyr::select(
  TreatmentID,
  starts_with("KOOSJR"),
  #starts_with("Tegner"),
  starts_with("EligibleAt"),
  -EligibleAtIntraop
) |> pivot_longer(
  cols = !TreatmentID,
  names_to = c(".value","TimePoint"),
  names_sep = "_",
  values_drop_na = TRUE
) |> mutate(
  TimePoint = factor(TimePoint, levels = c("Preop","3months","12months","24months","60months"), ordered = TRUE, exclude = NA),
) |> dplyr::filter(
  EligibleAt == "Yes",
  !is.na(TimePoint)
) |> left_join(
  SnapshotKA |> dplyr::select(
    TreatmentID,
    SurgicalTreatment2
  ),
  by = "TreatmentID"
)



gg_miss_fct(PROMKA |> dplyr::select(contains("Score"), TimePoint), TimePoint) +
  scale_fill_gradient(
    low = "steelblue",     # Color for low missingness values
    high = "darkred",      # Color for high missingness values
    limits = c(min_percent, max_percent),    # Consistent scale limits
    name = "% Missing"     # Legend title
  )
```

```{r}
#| label: fig-tfi-miss
#| fig-cap: "Missingness of IKDC2000 Score by Timepoint in the Tibiofemoral Instability cohort"


SnapshotTFI <- Snapshot |> dplyr::filter(
  RegistryCohortName == "TFInstability"
) |> rename_with(
  ~gsub("Atx","At_",.x, fixed = TRUE)
) |> rename_with(
  ~gsub("IKDC_TotalScore","IKDCTotalScore",.x, fixed = TRUE)
) |> rename(
  EligibleAt_Preop = "EligibleAtPreop"
)

PROMTFI <- SnapshotTFI |> dplyr::select(
  TreatmentID,
  starts_with("IKDC"),
  starts_with("EligibleAt"),
  -EligibleAtIntraop
) |> pivot_longer(
  cols = !TreatmentID,
  names_to = c(".value","TimePoint"),
  names_sep = "_",
  values_drop_na = TRUE
) |> mutate(
  TimePoint = factor(TimePoint, levels = c("Preop","3months","6months","12months","24months"), ordered = TRUE, exclude = NA),
  IKDCTotalScore = as.numeric(IKDCTotalScore),
  IKDCSymptomQ7 = forcats::fct(
    IKDCSymptomQ7,
    levels = c(
    "Very strenuous activities like jumping or pivoting as in basketball or soccer",
    "Strenuous activities like heavy physical work, skiing or tennis",
    "Moderate activities like moderate physical work, running or jogging",
    "Light activities like walking, housework or yard work",
    "Unable to perform any of the above activities due to giving way of the knee"
  ))
) |> dplyr::filter(
  EligibleAt == "Yes",
  !is.na(TimePoint)
) |> left_join(
  SnapshotTFI |> dplyr::select(
    TreatmentID,
    SurgicalTreatment2,
    TreatmentType,
    TreatmentStatus
  ),
  by = "TreatmentID"
)



gg_miss_fct(PROMTFI |> dplyr::filter(SurgicalTreatment2 == "Surgical") |> dplyr::select(contains("Score"), TimePoint), TimePoint) +
  scale_fill_gradient(
    low = "steelblue",     # Color for low missingness values
    high = "darkred",      # Color for high missingness values
    limits = c(min_percent, max_percent),    # Consistent scale limits
    name = "% Missing"     # Legend title
  )
```

```{r}
MarxQ <- Snapshot |> dplyr::filter(
  RegistryCohortName == "TFInstability"
) |> dplyr::select(
  starts_with("MARXQ")
)

ACLRSI <- Snapshot |> dplyr::filter(
  RegistryCohortName == "TFInstability"
) |> dplyr::select(
  TreatmentID,
  starts_with("ACLRSI"),
  starts_with("EligibleAt")
)  |> rename_with(
  ~gsub("Atx","At_",.x, fixed = TRUE)
) |> rename_with(
  ~gsub("ACLRSISF_TotalScore","ACLRSISFTotalScore",.x, fixed = TRUE)
) |> rename(
  EligibleAt_Preop = "EligibleAtPreop"
)


ACLRSI1 <-  ACLRSI |> dplyr::select(
  TreatmentID,
  starts_with("ACLRSISFTotalScore"),
  EligibleAt_6months,
  EligibleAt_12months
) |> pivot_longer(
  cols = !TreatmentID,
  names_to = c(".value","TimePoint"),
  names_sep = "_",
  values_drop_na = TRUE
) |> mutate(
  TimePoint = factor(TimePoint, levels = c("6months","12months"), ordered = TRUE, exclude = NA),
  ACLRSISFTotalScore = as.numeric(ACLRSISFTotalScore)
) |> dplyr::filter(
  EligibleAt == "Yes",
  !is.na(TimePoint)
) |> left_join(
  SnapshotTFI |> dplyr::select(
    TreatmentID,
    SurgicalTreatment2
  ),
  by = "TreatmentID"
)
```

The cumulative results of the Registry illustrate difficulty in engaging patients beyond short term followup.

## Baseline by Year

```{r}
#| label: fig-ka-missbase
#| fig-cap: "Missingness of Baseline Oxford Knee Score by Year in the Knee Arthritis cohort"


PROMKA1 <- PROMKA |> left_join(
  STROBEFlow3 |> dplyr::select(
    trialno,
    DateTreatmentRecordCreation
  ) |> dplyr::mutate(CreationYear = lubridate::year(DateTreatmentRecordCreation)),
  join_by(TreatmentID == trialno)
) |> dplyr::filter(
  TimePoint == "Preop"
  ) |> dplyr::select(
  CreationYear,
  KOOSJRTotalScore
)

gg_miss_fct(PROMKA1, CreationYear) +
  scale_fill_gradient(
    low = "steelblue",     # Color for low missingness values
    high = "darkred",      # Color for high missingness values
    limits = c(min_percent, max_percent),    # Consistent scale limits
    name = "% Missing"     # Legend title
  )

```

```{r}
#| label: fig-tfi-missbase
#| fig-cap: "Missingness of Baseline IKDC2000 by Year in the Tibiofemoral Instability cohort"


PROMTFI1 <- PROMTFI |> left_join(
  STROBEFlow3 |> dplyr::select(
    trialno,
    DateTreatmentRecordCreation
  ) |> dplyr::mutate(CreationYear = lubridate::year(DateTreatmentRecordCreation)),
  join_by(TreatmentID == trialno)
) |> dplyr::filter(
  TimePoint == "Preop",
  !(CreationYear < 2017)
  ) |> dplyr::select(
  CreationYear,
  IKDCTotalScore
) 

gg_miss_fct(PROMTFI1, CreationYear) +
  scale_fill_gradient(
    low = "steelblue",     # Color for low missingness values
    high = "darkred",      # Color for high missingness values
    limits = c(min_percent, max_percent),    # Consistent scale limits
    name = "% Missing"     # Legend title
  )

```

The results displayed in @fig-tfi-missbase helped to identify the system issue preventing cohort-specific scores being resent to cases that were transferred from one cohort to another. This has now been rectified and eligible cases have been resent links to complete the required questionnaires.

# Cohort Analysis

The VR12 is a *general* health questionnaire that is presented to *all* patients enrolled in the registry.

```{r}
#| label: fig-vr12pcs-cohort
#| fig-cap: "Summary of VR12-PCS at baseline by cohort"

Snapshot <- dplyr::mutate(
  Snapshot,
  across(contains("Score"), ~as.numeric(.))
)

FigureVR12PCS <- Snapshot |> dplyr::filter(SurgicalTreatment2 == "Surgical") |>
  ggplot(aes(y = RegistryCohortName, x = VR12_Physical_TotalScore_Preop)) +
  stat_halfeye()


knitr::knit_print(FigureVR12PCS)

```

```{r}
#| label: fig-vr12mcs-cohort
#| fig-cap: "Summary of VR12-MCS at baseline by cohort"

FigureVR12MCS <- Snapshot |> dplyr::filter(RegistryCohortName != "KneeDeformity") |>
  ggplot(aes(y = RegistryCohortName, x = VR12_Mental_TotalScore_Preop)) +
  stat_halfeye()


knitr::knit_print(FigureVR12MCS)
```

Between-cohort variability is observed for the Physical Component Score of the VR12, but not as pronounced for the Mental Component Score. Most notable is the high variation within all cohorts for both VR12 component scores.

```{r}
#| label: fig-sane
#| fig-cap: "Summary of SANE by Timepoint"

preop_position <- which(levels(PROMSANE$TimePoint) == "Preop")

FigureSANE <- PROMSANE |> dplyr::filter(
  !(is.na(SurgicalTreatment2)),
  !is.na(SANE)
) |> ggplot(aes(y = SANE, x = TimePoint, fill = SurgicalTreatment2, color = SurgicalTreatment2)) +
  stat_halfeye(
    alpha = 0.5,  # Transparency for overlap visibility
    position = "identity",  # Overlay the distributions
    na.rm = TRUE,
    scale = 0.9  # Slightly scale down to avoid too much overlap
  ) +
  # Add appropriate scale colors
  scale_fill_manual(values = c("Surgical" = "steelblue", "Non-Surgical" = "darkgray", "Surgery recommended" = "darkred")) +
  scale_color_manual(values = c("Surgical" = "steelblue4", "Non-Surgical" = "dimgray","Surgery recommended" = "darkred")) +
  labs(
    y = "SANE",
    x = "Time Point",
    fill = "Treatment",
    color = "Treatment"
  ) +
  theme_minimal() +
  theme(
    legend.position = "top",
    panel.grid.minor = element_blank()
  ) + facet_wrap(
    ~RegistryCohortName, ncol = 2
  )

knitr::knit_print(FigureSANE)
```

```{r}


PROMMODEM <-  Snapshot |> dplyr::filter(
  !(RegistryCohortName == "KneeGeneral")
) |> rename_with(
  ~gsub("Atx","At_",.x, fixed = TRUE)
) |> rename(
  EligibleAt_Preop = "EligibleAtPreop"
) |> dplyr::select(
  starts_with("MODEMP"),
  starts_with("Eligible"),
  TreatmentID
)

PROMMODEM1 <- PROMMODEM |> dplyr::select(
  -EligibleAtIntraop
) |> pivot_longer(
  cols = !TreatmentID,
  names_to = c(".value","TimePoint"),
  names_sep = "_",
  values_drop_na = TRUE
) |> mutate(
  TimePoint = factor(TimePoint, levels = c("6months","12months"), ordered = TRUE, exclude = NA),
  across(starts_with("MODEMP"), ~ forcats::fct(
    .,
    levels = c(
    "Not applicable",
    "Definitely not",
    "Probably not",
    "Not sure",
    "Probably yes",
    "Definitely yes"
  ))
)
) |> dplyr::filter(
  EligibleAt == "Yes",
  !is.na(TimePoint)
) |> left_join(
  Snapshot |> dplyr::select(
    TreatmentID,
    SurgicalTreatment2,
    RegistryCohortName
  ),
  by = "TreatmentID"
)

```

```{r}
#| label: fig-modemp1
#| fig-cap: "Satisfaction with symptom relief by Time Point and Cohort captured by post-operative MODEMs"

FigModemP1 <- ggplot(PROMMODEM1 |> dplyr::filter(!is.na(MODEMPQ1), SurgicalTreatment2 == "Surgical"), aes(x = TimePoint, fill = MODEMPQ1)) +
  geom_bar(position = "fill") +
  facet_wrap(~ RegistryCohortName) +
  labs(#title = "",
       x = "Time Point",
       y = "Count",
       fill = "Outcome") +
  scale_fill_viridis_d(option = "viridis") +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold"),
    legend.position = "bottom"
  )



knitr::knit_print(FigModemP1)
```

```{r}
#| label: fig-modempre1
#| fig-cap: "Expectations of symptom relief by Cohort and Treatment TYpe captured by pre-treatment MODEMs"

Snapshot1 <- Snapshot |> dplyr::mutate(
  MODEMQ1_Preop = forcats::fct(
    MODEMQ1_Preop,
    levels = c(
    "Not applicable",
    "Not at all likely",
    "Slightly likely",
    "Somewhat likely",
    "Very likely",
    "Extremely likely"
  ))
)

FigModem1Pre <- ggplot(Snapshot1 |> dplyr::filter(
  !is.na(MODEMQ1_Preop),
  !is.na(SurgicalTreatment2)
  ),
  aes(x = RegistryCohortName,
      fill = MODEMQ1_Preop)
  ) + 
  geom_bar(position = "fill") +
  scale_fill_viridis_d(option = "viridis") +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold"),
    legend.position = "bottom"
  ) + facet_wrap(~ SurgicalTreatment2, nrow = 3)


knitr::knit_print(FigModem1Pre)
```

```{r}
#| label: fig-modemp3
#| fig-cap: "Satisfaction with sleep comfort by Time Point and Cohort captured by post-operative MODEMs"

FigModemP3 <- ggplot(PROMMODEM1 |> dplyr::filter(!is.na(MODEMPQ3), SurgicalTreatment2 == "Surgical"), aes(x = TimePoint, fill = MODEMPQ3)) +
  geom_bar(position = "fill") +
  facet_wrap(~ RegistryCohortName) +
  labs(#title = "Satisfaction with sleep comfort by Time Point and Cohort",
       x = "Time Point",
       y = "Count",
       fill = "Outcome") +
  scale_fill_viridis_d(option = "viridis") +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold"),
    legend.position = "bottom"
  )

knitr::knit_print(FigModemP3)
```

## Knee Arthritis

```{r}
#| label: tbl-ka-demographics
#| tbl-cap: "Summary of demographics in Knee Arthritis cohort"

TableKAdemo <- gtsummary::tbl_summary(
  Snapshot |> dplyr::filter(
    RegistryCohortName == "KneeArthritis"
  ) |> dplyr::select(
    TreatmentType,
    SurgicalTreatment2,
    TreatmentStatus,
    DateInitialExamination,
    AgeAtInitialExam,
    Sex,
    EducationLevel_Preop,
    DiagnosisCoded
  ),
  by = "SurgicalTreatment2",
  missing = "no",
  statistic = list(
    DateInitialExamination ~ "{min} - {max}"
  )
)

knitr::knit_print(TableKAdemo)
```

```{r}
#| label: fig-koosjr-ka
#| fig-cap: "Summary of KOOSJR by Timepoint"

preop_position <- which(levels(PROMKA$TimePoint) == "Preop")


PROMKA2 <- dplyr::mutate(
  PROMKA,
  across(contains("Score"), ~as.numeric(.))
)
FigureKOOSJR_overlay <- PROMKA2 |> dplyr::filter(
  !(is.na(SurgicalTreatment2))
) |> ggplot(aes(y = KOOSJRTotalScore, x = TimePoint, fill = SurgicalTreatment2, color = SurgicalTreatment2)) +
  stat_halfeye(
    alpha = 0.5,  # Transparency for overlap visibility
    position = "identity",  # Overlay the distributions
    na.rm = TRUE,
    scale = 0.9  # Slightly scale down to avoid too much overlap
  ) +
  # Add the ellipse annotation
  ggforce::geom_ellipse(aes(x0 = preop_position, 
                  y0 = 70, 
                  a = 0.3, 
                  b = 5, 
                  angle = 0),
             color = "red", 
             size = 1.2,
             inherit.aes = FALSE) +
  annotate("text", 
           x = preop_position + 0.4, 
           y = 85,
           label = "High preop scores",
           color = "red",
           fontface = "bold",
           size = 3.5) +
  # Add appropriate scale colors
  scale_fill_manual(values = c("Surgical" = "steelblue", "Non-Surgical" = "darkgray", "Surgery recommended" = "darkred")) +
  scale_color_manual(values = c("Surgical" = "steelblue4", "Non-Surgical" = "dimgray", "Surgery recommended" = "darkred")) +
  labs(
    y = "KOOSJR Total Score",
    x = "Time Point",
    fill = "Treatment",
    color = "Treatment"
  ) +
  theme_minimal() +
  theme(
    legend.position = "top",
    panel.grid.minor = element_blank()
  )

knitr::knit_print(FigureKOOSJR_overlay)
```

```{r}
#| label: tbl-ka-intraop
#| tbl-cap: "Summary of intraoperative variables in Knee Arthritis cohort"

TableKAsurg <- gtsummary::tbl_summary(
  Snapshot |> dplyr::filter(
    RegistryCohortName == "KneeArthritis",
    SurgicalTreatment2 == "Surgical"
  ) |> dplyr::select(
    Facility:AdjunctProcedures
  ),
  missing = "no"
)

knitr::knit_print(TableKAsurg)


```

Assessment of the *KneeArthritis* cohort reveals that some patients enrolled in the cohort are scoring high on the KOOS JR preoperatively, intraoperative data requires backfilling and that there may be sufficient variation in surgical technique to warrant further investigation (e.g. patellar resurfacing, tourniquet use, soft tissue management).

## Tibiofemoral Instability

```{r}
#| label: tbl-tfi-demographics
#| tbl-cap: "Summary of demographics in Tibiofemoral Instability cohort"

TableTFIdemo <- gtsummary::tbl_summary(
  Snapshot |> dplyr::filter(
    RegistryCohortName == "TFInstability"
  ) |> dplyr::select(
    TreatmentType,
    SurgicalTreatment2,
    TreatmentStatus,
    DateInitialExamination,
    AgeAtInitialExam,
    Sex,
    EducationLevel_Preop,
    DiagnosisCoded
  ),
  by = "SurgicalTreatment2",
  missing = "no",
  statistic = list(
    DateInitialExamination ~ "{min} - {max}"
  )
)

knitr::knit_print(TableTFIdemo)
```

```{r}
#| label: fig-ikdc-tfi
#| fig-cap: "Summary of IKDC2000 by Timepoint for primary presentations"

preop_position <- which(levels(PROMTFI$TimePoint) == "Preop")

FigureIKDC <- PROMTFI |> dplyr::filter(
  !(is.na(SurgicalTreatment2)),
  TreatmentType == "Primary"
) |> ggplot(aes(y = IKDCTotalScore, x = TimePoint, fill = SurgicalTreatment2, color = SurgicalTreatment2)) +
  stat_halfeye(
    alpha = 0.5,  # Transparency for overlap visibility
    position = "identity",  # Overlay the distributions
    na.rm = TRUE,
    scale = 0.9  # Slightly scale down to avoid too much overlap
  ) +
  # Add the ellipse annotation
  ggforce::geom_ellipse(
    data = data.frame(x0 = preop_position, y0 = 70, a = 0.3, b = 5, angle = 0),
    aes(x0 = x0, y0 = y0, a = a, b = b, angle = angle),
    color = "red", 
    size = 1.2,
    inherit.aes = FALSE
  ) +
  annotate("text", 
           x = preop_position + 0.4, 
           y = 85,
           label = "High preop scores",
           color = "red",
           fontface = "bold",
           size = 3.5) +
  # Add appropriate scale colors
  scale_fill_manual(values = c("Surgical" = "steelblue", "Non-Surgical" = "darkgray", "Surgery recommended" = "darkred")) +
  scale_color_manual(values = c("Surgical" = "steelblue4", "Non-Surgical" = "dimgray", "Surgery recommended" = "darkred")) +
  labs(
    y = "IKDC Total Score",
    x = "Time Point",
    fill = "Treatment",
    color = "Treatment"
  ) +
  theme_minimal() +
  theme(
    legend.position = "top",
    panel.grid.minor = element_blank()
  )


knitr::knit_print(FigureIKDC)

```

Overall, the *TFInstability* cohort mean IKDC score does not reach the reported patient acceptable symptom state (\~ 80) on average at up to 2 years followup. Considering the missingness patterns in the data, this could be attributed to patients self-selecting into responding to PROMs.

```{r}
#| label: fig-ikdcsym7
#| fig-cap: "IKDC Symptom Q7 - highest level of activity performed in which episodes of giving way are experienced in Tibiofemoral Instability cohort"


FigIKDCSym7 <- ggplot(PROMTFI |> dplyr::filter(
  !is.na(IKDCSymptomQ7),
  !is.na(SurgicalTreatment2)
  ), aes(x = TimePoint, fill = IKDCSymptomQ7)) +
  geom_bar(position = "fill") +
  facet_wrap(~ SurgicalTreatment2, nrow = 3) +
  # Use a color-blind friendly palette (viridis options: "magma", "inferno", "plasma", "viridis", "cividis", "rocket", "mako", "turbo")
  scale_fill_viridis_d(option = "viridis") +
  # labs(title = "IKDC Symptom Q7 by Time Point and Surgical Treatment",
  #      x = "Time Point",
  #      y = "Proportion",  # Changed from "Count" to "Proportion" since we're using position="fill"
  #      fill = "Activity Level") +  # Assuming IKDCSymptomQ7 is about activity levels
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold"),
    legend.position = "bottom",
    legend.box = "vertical",  # Stack legend items vertically
    legend.margin = margin(t = 10, r = 0, b = 0, l = 0),
    legend.key.size = unit(0.8, "cm"),  # Slightly larger legend keys for better visibility
    legend.text = element_text(size = 9)  # Adjust text size as needed
  ) +
  guides(fill = guide_legend(nrow = 5))  # Force legend to use 5 rows (adjust as needed based on number of categories)

  
  knitr::knit_print(FigIKDCSym7)
```

```{r}
#| label: fig-ikdcsym7prim
#| fig-cap: "IKDC Symptom Q7 - highest level of activity performed in which episodes of giving way are experienced in Tibiofemoral Instability cohort - primary surgical cases"


FigIKDCSym7 <- ggplot(PROMTFI |> dplyr::filter(
  !is.na(IKDCSymptomQ7),
  SurgicalTreatment2 == "Surgical",
  TreatmentType == "Primary"
  ), aes(x = TimePoint, fill = IKDCSymptomQ7)) +
  geom_bar(position = "fill") +
  # facet_wrap(~ SurgicalTreatment2, nrow = 3) +
  # Use a color-blind friendly palette (viridis options: "magma", "inferno", "plasma", "viridis", "cividis", "rocket", "mako", "turbo")
  scale_fill_viridis_d(option = "viridis") +
  # labs(title = "IKDC Symptom Q7 by Time Point and Surgical Treatment",
  #      x = "Time Point",
  #      y = "Proportion",  # Changed from "Count" to "Proportion" since we're using position="fill"
  #      fill = "Activity Level") +  # Assuming IKDCSymptomQ7 is about activity levels
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold"),
    legend.position = "bottom",
    legend.box = "vertical",  # Stack legend items vertically
    legend.margin = margin(t = 10, r = 0, b = 0, l = 0),
    legend.key.size = unit(0.8, "cm"),  # Slightly larger legend keys for better visibility
    legend.text = element_text(size = 9)  # Adjust text size as needed
  ) +
  guides(fill = guide_legend(nrow = 5))  # Force legend to use 5 rows (adjust as needed based on number of categories)

  
  knitr::knit_print(FigIKDCSym7)
```

```{r}
#| label: fig-aclris
#| fig-cap: "ACL return to sport index - short form"

FigureACLRSI <- ACLRSI1 |> ggplot(aes(y = ACLRSISFTotalScore, x = TimePoint, fill = SurgicalTreatment2, color = SurgicalTreatment2)) +
  stat_halfeye(
    alpha = 0.5,  # Transparency for overlap visibility
    position = "identity",  # Overlay the distributions
    na.rm = TRUE,
    scale = 0.9  # Slightly scale down to avoid too much overlap
  ) 

knitr::knit_print(FigureACLRSI)

```

## Reintervention TKA

```{r}
#| label: tbl-rtka-demographics
#| tbl-cap: "Summary of demographics in Reintervention Arthroplasty cohort"

TablerTKAdemo <- gtsummary::tbl_summary(
  Snapshot |> dplyr::filter(
    RegistryCohortName == "ReinterventionArthroplasty"
  ) |> dplyr::select(
    TreatmentType,
    SurgicalTreatment2,
    TreatmentStatus,
    DateInitialExamination,
    AgeAtInitialExam,
    Sex,
    EducationLevel_Preop,
    DiagnosisCoded
  ),
  by = "SurgicalTreatment2",
  missing = "no",
  statistic = list(
    DateInitialExamination ~ "{min} - {max}"
  )
)

knitr::knit_print(TablerTKAdemo)
```

```{r}
SnapshotrTKA <- Snapshot |> dplyr::filter(
  RegistryCohortName == "ReinterventionArthroplasty"
  ) |> rename_with(
  ~gsub("Atx","At_",.x, fixed = TRUE)
) |> rename_with(
  ~gsub("KOOS12_Summary_TotalScore","KOOS12TotalScore",.x, fixed = TRUE)
) |> rename(
  EligibleAt_Preop = "EligibleAtPreop"
)
```

```{r}
#| label: fig-csi
#| fig-cap: "Central sensitisation index - Reintervention TKA"

FigureCSI <- SnapshotrTKA |> dplyr::filter(
  !is.na(SurgicalTreatment)
) |> ggplot(aes(y = SurgicalTreatment, x = CSIA_TotalScore_Preop)) +
  stat_halfeye()

knitr::knit_print(FigureCSI)
```

```{r}
PROMrTKA <- SnapshotrTKA |> dplyr::select(
  TreatmentID,
  starts_with("KOOS12TotalScore"),
  starts_with("EligibleAt"),
  -EligibleAtIntraop
) |> pivot_longer(
  cols = !TreatmentID,
  names_to = c(".value","TimePoint"),
  names_sep = "_",
  values_drop_na = TRUE
) |> mutate(
  TimePoint = factor(TimePoint, levels = c("Preop","6months","12months","24months"), ordered = TRUE, exclude = NA),
  across(contains("Score"), ~as.numeric(.))
) |> dplyr::filter(
  EligibleAt == "Yes",
  !is.na(TimePoint)
) |> left_join(
  SnapshotrTKA |> dplyr::select(
    TreatmentID,
    SurgicalTreatment2
  ),
  by = "TreatmentID"
)
```

```{r}
#| label: fig-koos12-rtka
#| fig-cap: "Summary of KOOSJR by Timepoint"

preop_position <- which(levels(PROMrKA$TimePoint) == "Preop")

FigureKOOS12_overlay <- PROMrTKA |> dplyr::filter(
  !(is.na(SurgicalTreatment2))
) |> ggplot(aes(y = KOOS12TotalScore, x = TimePoint, fill = SurgicalTreatment2, color = SurgicalTreatment2)) +
  stat_halfeye(
    alpha = 0.5,  # Transparency for overlap visibility
    position = "identity",  # Overlay the distributions
    na.rm = TRUE,
    scale = 0.9  # Slightly scale down to avoid too much overlap
  ) +
  # Add the ellipse annotation
  ggforce::geom_ellipse(aes(x0 = preop_position, 
                  y0 = 70, 
                  a = 0.3, 
                  b = 5, 
                  angle = 0),
             color = "red", 
             size = 1.2,
             inherit.aes = FALSE) +
  annotate("text", 
           x = preop_position + 0.4, 
           y = 85,
           label = "High preop scores",
           color = "red",
           fontface = "bold",
           size = 3.5) +
  # Add appropriate scale colors
  scale_fill_manual(values = c("Surgical" = "steelblue", "Non-Surgical" = "darkgray", "Surgery recommended" = "darkred")) +
  scale_color_manual(values = c("Surgical" = "steelblue4", "Non-Surgical" = "dimgray", "Surgery recommended" = "darkred")) +
  labs(
    y = "KOOSJR Total Score",
    x = "Time Point",
    fill = "Treatment",
    color = "Treatment"
  ) +
  theme_minimal() +
  theme(
    legend.position = "top",
    panel.grid.minor = element_blank()
  )

knitr::knit_print(FigureKOOS12_overlay)
```

```{r}
PROMSat <-  SnapshotrTKA |> dplyr::select(
  starts_with("Satisfaction"),
  starts_with("Eligible"),
  TreatmentID
)

PROMSat1 <- PROMSat |> dplyr::select(
  -EligibleAtIntraop
) |> pivot_longer(
  cols = !TreatmentID,
  names_to = c(".value","TimePoint"),
  names_sep = "_",
  values_drop_na = TRUE
) |> mutate(
  TimePoint = factor(TimePoint, levels = c("6months","12months"), ordered = TRUE, exclude = NA),
  across(starts_with("Satisfaction"), ~ forcats::fct(
    .,
    levels = c(
    "Very dissatisfied",
    "Somewhat dissatisfied",
    "Neutral",
    "Somewhat satisfied",
    "Very satisfied"
  ))
)
) |> dplyr::filter(
  EligibleAt == "Yes",
  !is.na(TimePoint)
) |> left_join(
  Snapshot |> dplyr::select(
    TreatmentID,
    SurgicalTreatment2
  ),
  by = "TreatmentID"
)
```

```{r}
#| label: fig-symptomsat
#| fig-cap: "Symptom satisfaction at 12month followup for Reintervention TKA"

FigModemP1 <- ggplot(PROMSat1 |> dplyr::filter(EligibleAt == "Yes", !is.na(SurgicalTreatment2), !is.na(Satisfaction)), 
                     aes(x = SurgicalTreatment2, fill = Satisfaction)) +
  geom_bar(position = "fill") +
  #facet_wrap(~ SurgicalTreatment2, nrow = 2) +
  labs(#title = "",
       x = "Time Point",
       y = "Count",
       fill = "Outcome") +
  scale_fill_viridis_d(option = "viridis") +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold"),
    legend.position = "bottom",
    legend.box = "vertical",  # Stack legend items vertically
    legend.margin = margin(t = 10, r = 0, b = 0, l = 0),
    legend.key.size = unit(0.8, "cm"),  # Slightly larger legend keys for better visibility
    legend.text = element_text(size = 9)  # Adjust text size as needed
  ) +
  guides(fill = guide_legend(nrow = 2)) 



knitr::knit_print(FigModemP1)
```

# Interpretation

# Recommendations
